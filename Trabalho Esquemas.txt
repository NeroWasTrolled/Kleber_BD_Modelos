_______________________________________
2 – Alterar o nome da coluna endereço da tabela Participante para ‘logradouro’
_______________________________________

ALTER TABLE participante
CHANGE COLUMN endereco logradouro varchar(100) DEFAULT NULL;

_______________________________________
3 – Inserir os dados nas tabelas de acordo com os dados abaixo:

_______________________________________
Categoria
_______________________________________

INSERT INTO Categoria VALUES(1, "Congresso");
INSERT INTO Categoria VALUES(2, "Simpósio");
INSERT INTO Categoria VALUES(3, "Feira");
INSERT INTO Categoria VALUES(4, "Semana Acadêmica");
INSERT INTO Categoria VALUES(5, "Encontro");
_______________________________________
Evento
_______________________________________

INSERT INTO Evento VALUES(1, "Semana de TI", "Senai", "2017/09/13", "semanati@evento.br", 4);
INSERT INTO Evento VALUES(2, "Simpósio de Eletrônica", "Senai", "2017/07/20", "Eletronica@teste.com.br", 2);
INSERT INTO Evento VALUES(3, "Semana Acadêmica", "Faculdade Albert Einstein", "2017/05/31", "albert@einstein.com.br", 4);
INSERT INTO Evento VALUES(4, "Feira Metal Mecânica", "Parque de Exposições", "2017/09/01", "metal@mecanica.com.br", 3);
_______________________________________
Tipo Inscrição
_______________________________________

INSERT INTO Tipo_Inscricao VALUES(1, 1, 80);
INSERT INTO Tipo_Inscricao VALUES(2, 1, 98);
INSERT INTO Tipo_Inscricao VALUES(3, 2, 30);
INSERT INTO Tipo_Inscricao VALUES(4, 2, 40);
INSERT INTO Tipo_Inscricao VALUES(5, 3, 150);
INSERT INTO Tipo_Inscricao VALUES(6, 3, 180);
INSERT INTO Tipo_Inscricao VALUES(7, 4, 90);
INSERT INTO Tipo_Inscricao VALUES(8, 4, 140);

_______________________________________
4 – Inserir 10 registros nas tabelas participante e participante_inscricao. (O campo situação deve contar os valores “ABERTO”, “PAGO” ou “CANCELADO”)
_______________________________________
Participante
_______________________________________

INSERT INTO participante VALUES(1, "Gabriel", "Rua Agostinho dos Santos", 955, "Jardim Leblon", "Maringá", "Pr", "gabrielfrancasimoes@gmail.com");
INSERT INTO participante VALUES(2, "Lucas", "Rua das Morangueiras", 122, "Jardim França", "Maringá", "Pr", "lucasvasquez@gmail.com");
INSERT INTO participante VALUES(3, "Marcos", "Rua das Babosas", 44, "Jardim Vila Operária", "Maringá", "Pr", "MarcosOrelho@gmail.com");
INSERT INTO participante VALUES(4, "Geovanna", "Alameda Antônio Andrade", 67, "Colina Verde", "Maringá", "Pr", "GeovannaRodrigues@gmail.com");
INSERT INTO participante VALUES(5, "Candace", "Alameda Doutor João Paulino", 223, "Jardim Dias", "Maringá", "Pr", "Candace007@gmail.com");
INSERT INTO participante VALUES(6, "Jorge", "Avenida Pinguim", 506, "Conjunto Ângelo Planas", "Maringá", "Pr", "JorginhoGameplays@gmail.com");
INSERT INTO participante VALUES(7, "Julinho Gameplays", "Avenida Sophia Rasgulaeff", 37, "Vila Santo Antônio.", "Maringá", "Pr", "JulinhoMatadorDeOnça@gmail.com");
INSERT INTO participante VALUES(8, "Ferdinanda", "Avenida Riachuelo", 154, "Jardim Anchieta", "Maringá", "Pr", "FerdinandaZoi@gmail.com");
INSERT INTO participante VALUES(9, "Mocoquinha", "Avenida Rio Branco", 222, "Vila Bosque", "Maringá", "Pr", "MocoquinhaToddy@gmail.com");
INSERT INTO participante VALUES(10, "Júlio Ceasar", "Avenida Palmeiras", 51, "Mundial", "Maringá", "Pr", "JúlioCeasar@gmail.com");

_______________________________________
Participante Inscrição
_______________________________________

INSERT INTO participante_inscricao VALUES(1, 1, 1, "ABERTO", "2017/09/15");
INSERT INTO participante_inscricao VALUES(1, 1, 1, "ABERTO", "2017/09/15");
INSERT INTO participante_inscricao VALUES(2, 3, 2, "PAGO", "2017/09/03");
INSERT INTO participante_inscricao VALUES(3, 5, 1, "CANCELADO", "2017/09/28");
INSERT INTO participante_inscricao VALUES(4, 7, 3, "CANCELADO", "2017/03/01");
INSERT INTO participante_inscricao VALUES(5, 2, 1, "ABERTO", "2017/07/22");
INSERT INTO participante_inscricao VALUES(6, 10, 1, "PAGO", "2017/12/02");
INSERT INTO participante_inscricao VALUES(7, 4, 3, "ABERTO", "2017/03/06");
INSERT INTO participante_inscricao VALUES(8, 2, 2, "PAGO", "2017/11/12");
INSERT INTO participante_inscricao VALUES(9, 2, 1, "PAGO", "2017/09/07");
INSERT INTO participante_inscricao VALUES(10, 6, 2, "CANCELADO", "2017/05/17");

_______________________________________
5 – Inserir 2 registros na tabela eventos
_______________________________________
Evento
_______________________________________

INSERT INTO Evento VALUES(5, "Semana de Eletromecanica", "Senai", "2017/09/28", "semanati@evento.br", 3);
INSERT INTO Evento VALUES(6, "Feira de Exposição", "Senai", "2017/03/17", "Feiradeexposicao@teste.com.br", 2);

_______________________________________
6 – Listar o nome, e-mail, endereço do participante e o nome do evento em que ele realizou inscrição.
_______________________________________

SELECT 
    participante.nome_participante,
    participante.email,
    participante.logradouro,
    participante.numero,
    participante.bairro,
    participante.cidade,
    participante.estado,
    evento.nome_evento AS evento
FROM 
    participante,
    participante_inscricao,
    tipo_inscricao,
    evento
WHERE 
    participante.codigo_participante = participante_inscricao.codigo_participante AND
    participante_inscricao.codigo_tipo = tipo_inscricao.codigo_tipo AND
    tipo_inscricao.Evento_codigo = evento.codigo;

_______________________________________
7 – Listar o nome do evento, data da realização, local e o nome do tipo do evento.
_______________________________________

SELECT 
    evento.nome_evento,
    evento.data_evento,
    evento.local_evento,
    tipo_inscricao.valor_tipo AS nome_tipo_evento
FROM 
    evento,
    tipo_inscricao
WHERE 
    evento.codigo = tipo_inscricao.Evento_codigo;

_______________________________________
8 – Listar todos os tipos de evento que não possuem um evento cadastrado.
_______________________________________

SELECT 
    tipo_inscricao.codigo_tipo,
    tipo_inscricao.valor_tipo AS nome_tipo_evento
FROM 
    tipo_inscricao
LEFT JOIN 
    evento ON tipo_inscricao.codigo_tipo = evento.codigo_categoria
WHERE 
    evento.codigo IS NULL;

_______________________________________
9 – Listar todos os eventos que são do tipo “ENCONTRO”
_______________________________________

SELECT e.*
FROM evento e
JOIN tipo_inscricao ti ON e.codigo = ti.Evento_codigo
JOIN participante_inscricao pi ON ti.codigo_tipo = pi.codigo_tipo
WHERE ti.codigo_tipo = 5;
_______________________________________
10 – Listar todos os participantes do evento “Semana de TI” que estão com a situação PAGO
_______________________________________

SELECT 
    participante.nome_participante,
    participante.email
FROM 
    participante
JOIN 
    participante_inscricao ON participante.codigo_participante = participante_inscricao.codigo_participante
JOIN 
    tipo_inscricao ON participante_inscricao.codigo_tipo = tipo_inscricao.codigo_tipo
JOIN 
    evento ON tipo_inscricao.Evento_codigo = evento.codigo
WHERE 
    evento.nome_evento = 'Semana de TI'
    AND participante_inscricao.situacao = 'PAGO';

_______________________________________
11 – Listar a quantidade de inscritos por evento cuja situação da inscrição não seja CANCELADA
_______________________________________

SELECT 
    evento.nome_evento,
    tipo_inscricao.valor_tipo AS tipo_evento,
    participante_inscricao.situacao AS situacao_inscricao
FROM 
    evento,
    tipo_inscricao,
    participante_inscricao
WHERE 
    evento.codigo = tipo_inscricao.Evento_codigo
    AND tipo_inscricao.codigo_tipo = participante_inscricao.codigo_tipo
    AND participante_inscricao.situacao <> 'CANCELADO';

_______________________________________
12 – Listar o valor total (SOMA) de todas as inscrições
_______________________________________

SELECT 
    tipo_inscricao.valor_tipo AS valor_da_inscricao
FROM 
    participante_inscricao
JOIN 
    tipo_inscricao ON participante_inscricao.codigo_tipo = tipo_inscricao.codigo_tipo
WHERE 
    participante_inscricao.situacao <> 'CANCELADO';

_______________________________________
13 – Listar a quantidade de inscritos por tipo de evento
_______________________________________

USE seu_banco_de_dados;

SELECT 
    ti.valor_tipo AS tipo_evento,
    pi.situacao AS situacao_inscricao
FROM 
    participante_inscricao pi
JOIN 
    tipo_inscricao ti ON pi.codigo_tipo = ti.codigo_tipo
WHERE 
    pi.situacao <> 'CANCELADO';

_______________________________________
14 – Listar o evento que será realizado na maior data e o que será realizado na menor data
_______________________________________

SELECT *
FROM evento
ORDER BY data_evento DESC
LIMIT 1;

SELECT *
FROM evento
ORDER BY data_evento ASC
LIMIT 1;

_______________________________________
15 – Listar o nome do participante e o valor pago na inscrição.
_______________________________________

SELECT p.nome_participante, ti.valor_tipo AS valor_pago
FROM participante p
JOIN participante_inscricao pi ON p.codigo_participante = pi.codigo_participante
JOIN tipo_inscricao ti ON pi.codigo_tipo = ti.codigo_tipo
WHERE pi.situacao = 'PAGO';

_______________________________________
16 – Listar o total de inscrições por situação.
_______________________________________

SELECT situacao, COUNT(*) AS total_inscricoes
FROM participante_inscricao
GROUP BY situacao;

_______________________________________
17 – Listar a quantidade de eventos por tipo.
_______________________________________

SELECT c.descricao AS tipo_evento, COUNT(*) AS quantidade_eventos
FROM evento e
JOIN categoria c ON e.codigo_categoria = c.codigo_categoria
GROUP BY c.descricao;

_______________________________________
18 – Listar os eventos que não possuem participantes inscritos
_______________________________________

SELECT e.*
FROM evento e
LEFT JOIN participante_inscricao pi ON e.codigo = pi.codigo_tipo
WHERE pi.cod_part_insc IS NULL;

_______________________________________
19 – Listar os participantes que não estão inscritos em nenhum evento
_______________________________________

SELECT p.*
FROM participante p
LEFT JOIN participante_inscricao pi ON p.codigo_participante = pi.codigo_participante
WHERE pi.codigo_tipo IS NULL;

_______________________________________
20 – Listar o nome do participante o e-mail das inscrições pagas
_______________________________________

SELECT p.nome_participante, p.email
FROM participante p
JOIN participante_inscricao pi ON p.codigo_participante = pi.codigo_participante
WHERE pi.situacao = 'PAGO';

_______________________________________
21 – Alterar o nome da coluna “SITUACAO” para “STATUS” da tabela participante_inscricao
_______________________________________

ALTER TABLE participante_inscricao
CHANGE COLUMN situacao status varchar(45) DEFAULT NULL;








